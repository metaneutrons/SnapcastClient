name: Publish NuGet
permissions:
  contents: read
  packages: write

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: "Version tag to publish (e.g., v1.0.0 or v1.0.0-beta.1)"
        required: true
        type: string
      force_prerelease:
        description: "Force prerelease publishing (overrides auto-detection)"
        required: false
        type: boolean
        default: false

jobs:
  publish-nuget:
    runs-on: ubuntu-latest
    steps:
      - name: Validate input and detect release type
        id: release_info
        run: |
          VERSION_TAG="${{ github.event.inputs.version_tag }}"
          FORCE_PRERELEASE="${{ github.event.inputs.force_prerelease }}"

          # Validate version tag format
          if [[ "$VERSION_TAG" != v* ]]; then
            echo "Error: Version tag must start with 'v' (e.g., v1.0.0 or v1.0.0-beta.1)"
            exit 1
          fi

          # Auto-detect if this is a prerelease based on version tag
          if [[ "$VERSION_TAG" == *"-"* ]] || [[ "$FORCE_PRERELEASE" == "true" ]]; then
            IS_PRERELEASE="true"
            RELEASE_TYPE="üß™ Prerelease"
            NUGET_FLAGS="--skip-duplicate"
          else
            IS_PRERELEASE="false"
            RELEASE_TYPE="üì¶ Stable Release"
            NUGET_FLAGS="--skip-duplicate"
          fi

          # Output information
          echo "üöÄ NuGet Publishing Information:"
          echo "  Version: $VERSION_TAG"
          echo "  Type: $RELEASE_TYPE"
          echo "  Is Prerelease: $IS_PRERELEASE"
          echo "  Force Prerelease: $FORCE_PRERELEASE"

          # Set outputs for later steps
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "nuget_flags=$NUGET_FLAGS" >> $GITHUB_OUTPUT
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT

      - name: Download release NuGet packages
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: .github/workflows/release.yml
          workflow_conclusion: success
          name: nuget-package
          path: ./artifacts
          # Download from the specific release tag
          check_artifacts: true

      - name: Verify downloaded packages
        run: |
          echo "üì¶ Downloaded NuGet packages:"
          find ./artifacts -name "*.nupkg" -o -name "*.snupkg" | while read pkg; do
            echo "  - $(basename "$pkg")"
          done

          # Check if any packages were found
          if ! find ./artifacts -name "*.nupkg" | grep -q .; then
            echo "‚ùå Error: No .nupkg files found in artifacts"
            exit 1
          fi

      - name: Pre-publish summary
        run: |
          RELEASE_TYPE="${{ steps.release_info.outputs.release_type }}"
          IS_PRERELEASE="${{ steps.release_info.outputs.is_prerelease }}"
          VERSION_TAG="${{ steps.release_info.outputs.version_tag }}"

          echo "üìã NuGet Publishing Plan:"
          echo "  üè∑Ô∏è  Version: $VERSION_TAG"
          echo "  üì¶ Type: $RELEASE_TYPE"
          echo "  üéØ Target: NuGet.org"
          echo ""

          if [ "$IS_PRERELEASE" = "true" ]; then
            echo "üß™ PRERELEASE PUBLISHING:"
            echo "  ‚Ä¢ Packages will be marked as prerelease"
            echo "  ‚Ä¢ Users need to opt-in to see these versions"
            echo "  ‚Ä¢ Install with: dotnet add package SnapcastClient --prerelease"
          else
            echo "üì¶ STABLE PUBLISHING:"
            echo "  ‚Ä¢ Packages will be marked as stable release"
            echo "  ‚Ä¢ Available in default NuGet searches"
            echo "  ‚Ä¢ Install with: dotnet add package SnapcastClient"
          fi
          echo ""

      - name: Publish packages to NuGet.org
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          RELEASE_TYPE="${{ steps.release_info.outputs.release_type }}"
          IS_PRERELEASE="${{ steps.release_info.outputs.is_prerelease }}"
          VERSION_TAG="${{ steps.release_info.outputs.version_tag }}"

          echo "üöÄ Starting NuGet publishing process..."
          echo "  Release Type: $RELEASE_TYPE"
          echo "  Version: $VERSION_TAG"

          # Publish all NuGet packages and symbol packages
          SUCCESS_COUNT=0
          ERROR_COUNT=0

          # Process .nupkg files
          echo "üîç Looking for .nupkg files..."
          for pkg in ./artifacts/*.nupkg; do
            if [ -f "$pkg" ]; then
              PKG_NAME=$(basename "$pkg")
              echo "üì§ Publishing $PKG_NAME..."

              if dotnet nuget push "$pkg" --api-key "$NUGET_API_KEY" \
                --source "https://api.nuget.org/v3/index.json" \
                ${{ steps.release_info.outputs.nuget_flags }}; then
                echo "‚úÖ Successfully published $PKG_NAME"
                SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              else
                echo "‚ùå Failed to publish $PKG_NAME"
                ERROR_COUNT=$((ERROR_COUNT + 1))
              fi
            fi
          done

          # Process .snupkg files (symbol packages) if they exist
          echo "üîç Looking for .snupkg files..."
          if ls ./artifacts/*.snupkg 1> /dev/null 2>&1; then
            for pkg in ./artifacts/*.snupkg; do
              if [ -f "$pkg" ]; then
                PKG_NAME=$(basename "$pkg")
                echo "üì§ Publishing symbol package $PKG_NAME..."

                if dotnet nuget push "$pkg" --api-key "$NUGET_API_KEY" \
                  --source "https://api.nuget.org/v3/index.json" \
                  ${{ steps.release_info.outputs.nuget_flags }}; then
                  echo "‚úÖ Successfully published $PKG_NAME"
                  SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
                else
                  echo "‚ùå Failed to publish $PKG_NAME"
                  ERROR_COUNT=$((ERROR_COUNT + 1))
                fi
              fi
            done
          else
            echo "‚ÑπÔ∏è No .snupkg files found (symbol packages not generated)"
          fi

          echo ""
          echo "üìä Publishing Summary:"
          echo "  ‚úÖ Successful: $SUCCESS_COUNT packages"
          echo "  ‚ùå Failed: $ERROR_COUNT packages"
          echo "  üè∑Ô∏è Release Type: $RELEASE_TYPE"

          if [ $ERROR_COUNT -gt 0 ]; then
            echo "‚ö†Ô∏è Some packages failed to publish"
            exit 1
          else
            echo "üéâ All packages published successfully!"
          fi
